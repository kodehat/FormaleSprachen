int main() {
	summe(6);
	fibo(10);
	ggT(3,6);
	binomi(3,6);
}

int binomi(int n, int k) {
  fact(n)/(fact(k)*fact(n-k));
}

int add(int x, int y) {
  if (y==0) return identity(x);
  else return add(x+1, y-1);
}

int add2(int x, int y) {
  if (y!=0) return add2(x+1, y-1);
  else  return identity(x);
}

int summe(int n){
   if (n==0) return 0;
   else return add2(summe(n-1),n);
}

int fact(int n){
   if (n<=1) return 1;
   else      return n*fact(n-1);
}

int ggT(int m, int n){
   if (m==n) return m;
   else if (m > n) return ggT(m-n,n);
   else return ggT(m,n-m);
}

int fibo(int n){
   if (n<2) return 1;
   else return add(fibo(n-1), fibo(n-2));
}

boolean even(int n){
   if (n==0) return true;
   else return odd(n-1);
}

boolean odd(int n){
   if (n==0) return false;
   else return even(n-1);
}

boolean even1(int n){
   if (n <= 1) return (n==0);
   return even1(n-2);
}

boolean even2(int n){
	if (n <= 1) return (n==0);
	else return !even2(n-1);
}

boolean even3(int n){
	if (n == 0) return true;
	else return !even3(n-1);
}

int identity(int x){
	return x;
}

int mcCarthy(int n){
   if (n > 100) return n-10;
   else return mcCarthy(mcCarthy(n+11));
}

int ulam(int n) {
	if (n==1) return 1;
	else if (even(n)) return ulam(n/2);
	else return ulam(3*n+1);
}

int ackermann(int n, int m) {
   if (n==0) return m + 1;
   else if (m==0) return ackermann(n-1,1);
   else return ackermann(n-1, ackermann(n,m-1));
}

