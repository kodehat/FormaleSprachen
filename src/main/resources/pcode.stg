program(globalsCount,functions) ::=<<
.globals <globalsCount>
<functions; separator="\n">
>>

functionDecl(name, block) ::=<<
.def <name>: args=0, locals=0
    <block>
>>

block(stats) ::=<<
    <stats; separator="\n">
>>

halt() ::= "halt"

assign(index,value) ::=<<
<value>
gstore <index>
>>

cond(cond,t,f,i) ::=<<
<ifElse(cond,t,f,i)>
>>

funcCall(name) ::= "call <name>()"

ifElse(cond,t,f,i) ::=<<
<cond>
brf s<i>
<t>
br cont<i>
s<i>:
<f>
cont<i>:
>>

for(assign,cond,step,block,i) ::=<<
<assign>
begin<i>:
<cond>
brf end<i>
<block>
<step>
br begin<i>
end<i>:
>>

return(value) ::=<<
<value>
ret
>>

print(value) ::=<<
<value>
print
>>

uminus(value) ::=<<
<mult(int("-1"), value)>
>>

not(value,i) ::=<<
<ifElse(value,assertFalse(),assertTrue(),i)>
>>

id(index) ::= "gload <index>"

int(value) ::= "iconst <value>"

add(a, b) ::=<<
<a>
<b>
iadd
>>

sub(a, b) ::=<<
<a>
<b>
isub
>>

mult(a, b) ::=<<
<a>
<b>
imul
>>

div(a, b) ::=<<
<a>
<b>
idiv
>>

gt(a, b) ::=<<
<a>
<b>
igt
>>

lt(a, b) ::=<<
<a>
<b>
ilt
>>

eq(a, b) ::=<<
<a>
<b>
ieq
>>

neq(a,b,i) ::=<<
<not(eq(a,b),i)>
>>

assertTrue() ::=<<
<eq(int("1"),int("1"))>
>>
assertFalse() ::=<<
<eq(int("1"),int("2"))>
>>